name: Deploy AWS Infrastructure

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action (apply or destroy)'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy

jobs:
  configuration:
    name: Terraform Action
    runs-on: ubuntu-latest

    steps:
      - name: Terraform Action
        run: echo "::warning::Action selected ${{ github.event.inputs.action }}"

  deploy-sqs-lambda-function:
    name: SQS Lambda Function - ${{ github.event.inputs.action }}
    runs-on: ubuntu-latest
    needs: configuration

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      # Set up Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      # Terraform Init
      - name: Terraform Init
        run: |
          terraform -chdir=sqs-lambda-function init

      # Terraform Plan
      - name: Terraform Plan
        if: github.event.inputs.action == 'apply'
        run: |
          terraform -chdir=sqs-lambda-function plan

      # Terraform Apply
      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        run: |
          terraform -chdir=sqs-lambda-function ${{ github.event.inputs.action }} -auto-approve

      # Terraform Destroy
      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: |
          terraform -chdir=sqs-lambda-function ${{ github.event.inputs.action }} -auto-approve

  deploy-sqs-queue:
    name: SQS Queue - ${{ github.event.inputs.action }}
    runs-on: ubuntu-latest
    needs: deploy-sqs-lambda-function

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      # Set up Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      # Terraform Init
      - name: Terraform Init
        run: |
          terraform -chdir=sqs-queue init

      # Terraform Plan
      - name: Terraform Plan
        if: github.event.inputs.action == 'apply'
        run: |
          terraform -chdir=sqs-queue plan

      # Terraform Apply
      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        run: |
          terraform -chdir=sqs-queue ${{ github.event.inputs.action }} -auto-approve
        
      # Terraform Destroy
      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: |
          terraform -chdir=sqs-queue ${{ github.event.inputs.action }} -auto-approve

  deploy-ecr-video-processor:
    name: ECR Video Processor - ${{ github.event.inputs.action }}
    runs-on: ubuntu-latest
    needs: deploy-sqs-lambda-function

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      # Set up Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      # Terraform Init
      - name: Terraform Init
        run: |
          terraform -chdir=ecr-video-processor init

      # Terraform Plan
      - name: Terraform Plan
        if: github.event.inputs.action == 'apply'
        run: |
          terraform -chdir=ecr-video-processor plan

      # Terraform Apply
      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        run: |
          terraform -chdir=ecr-video-processor ${{ github.event.inputs.action }} -auto-approve

      # Terraform Destroy
      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: |
          terraform -chdir=ecr-video-processor ${{ github.event.inputs.action }} -auto-approve
          
  deploy-ecr-frame-processor:
    name: ECR Frame Processor - ${{ github.event.inputs.action }}
    runs-on: ubuntu-latest
    needs: deploy-sqs-lambda-function

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      # Set up Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      # Terraform Init
      - name: Terraform Init
        run: |
          terraform -chdir=ecr-frame-processor init

      # Terraform Plan
      - name: Terraform Plan
        if: github.event.inputs.action == 'apply'
        run: |
          terraform -chdir=ecr-frame-processor plan

      # Terraform Apply
      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        run: |
          terraform -chdir=ecr-frame-processor ${{ github.event.inputs.action }} -auto-approve

      # Terraform Destroy
      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: |
          terraform -chdir=ecr-frame-processor ${{ github.event.inputs.action }} -auto-approve

  # deploy-dynamodb:
  #   name: DynamoDB - ${{ github.event.inputs.action }}
  #   runs-on: ubuntu-latest
  #   needs: deploy-sqs-lambda-function

  #   steps:
  #     # Checkout the code
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
  #         aws-region: us-east-1

  #     # Set up Terraform
  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v2
  #       with:
  #         terraform_version: 1.5.6

  #     # Terraform Init
  #     - name: Terraform Init
  #       run: |
  #         terraform -chdir=dynamodb init

  #     # Terraform Plan
  #     - name: Terraform Plan
  #       if: github.event.inputs.action == 'apply'
  #       run: |
  #         terraform -chdir=dynamodb plan

  #     # Terraform Apply
  #     - name: Terraform Apply
  #       if: github.event.inputs.action == 'apply'
  #       run: |
  #         terraform -chdir=dynamodb ${{ github.event.inputs.action }} -auto-approve

  #     # Terraform Destroy
  #     - name: Terraform Destroy
  #       if: github.event.inputs.action == 'destroy'
  #       run: |
  #         terraform -chdir=dynamodb ${{ github.event.inputs.action }} -auto-approve

  deploy-eks:
    name: EKS - ${{ github.event.inputs.action }}
    runs-on: ubuntu-latest
    needs: deploy-sqs-queue

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      # Set up Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      # Terraform Init
      - name: Terraform Init
        run: |
          terraform -chdir=eks-fiap-cluster init

      # Terraform Plan
      - name: Terraform Plan
        if: github.event.inputs.action == 'apply'
        run: |
          terraform -chdir=eks-fiap-cluster plan

      # Terraform Apply
      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        run: |
          terraform -chdir=eks-fiap-cluster ${{ github.event.inputs.action }} -auto-approve

      # Terraform Destroy
      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: |
          terraform -chdir=eks-fiap-cluster ${{ github.event.inputs.action }} -auto-approve